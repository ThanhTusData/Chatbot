version: '3.8'

services:
  api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: chatbot-api
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - LOG_LEVEL=INFO
    volumes:
      - ../../logs:/app/logs
      - ../../models:/app/models
      - ../../indexes:/app/indexes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: chatbot-web
    ports:
      - "5000:5000"
    environment:
      - APP_ENV=production
      - API_HOST=api
      - API_PORT=8000
    depends_on:
      - api
    restart: unless-stopped
    command: ["python", "src/web/flask_app.py"]

  prometheus:
    image: prom/prometheus:latest
    container_name: chatbot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: chatbot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  prometheus-data:
  grafana-data: